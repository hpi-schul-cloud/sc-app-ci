# Workflow to deploy the HPI Schul-Cloud application either the develop branch scheduled to the current test instance
#          or manually deploy images with *_latest tag  to an instance on a team assigned machine.
# The later invocation query parameters at start to identify the image tag to be deployed.
# Parameters:
#   branch-prefix : feature|develop|release|hotfix|master
#   team-no       : the team number to identify the machine hotfix<team-no>.schul-cloud.dev
#   ticket-id     : either the JIRA ticket-id used in the branch or the version numer for release and master branches

name: sc-app-deploy

# Controls when the action will run.
on:
  # schedule:
    # At midnight every day
  #  - cron: "0 0 * * *"
  workflow_dispatch:
    # Manual invocation
    inputs:
      branch-prefix:
        description: "The branch prefix to use. Either feature|develop|release|hotfix|master"
        required: true
        default: ""
      team-no:
        description: "Team number. Always required."
        required: true
        default: ""
      tag-qualifier:
        description: "Ticket ID on feature or hotfix branch. Version number on master and release branch"
        required: false
        default: ""
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deploy"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      # Setting environment variables here make them available for all steps
      CI_GITHUB_TRAVISUSER_SWARMVM_KEY: ${{ secrets.CI_GITHUB_TRAVISUSER_SWARMVM_KEY }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
    defaults:
      # Setting defaults for all steps, this require the first action must check-out the code
      run:
        working-directory: ./sc-app-deploy

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it must be on first place to allow central setting of working directory
      - uses: actions/checkout@v2
      - name: Echo parameter
        run: |
          echo "GITHUB event trigger:       ${{ github.event_name }}
          echo "GITHUB input branch-prefix: ${{ github.event.inputs.branch-prefix }}
          echo "GITHUB input team-no:       ${{ github.event.inputs.team-no }}
          echo "GITHUB input tag-qualifier: ${{ github.event.inputs.tag-qualifier }}

      - name: Display working directory
        # Just for failure analysis to track down possible issues occurring for invalid host configurations
        run: |
          ls -la .
          env
          chmod a+x ./sc-app-deploy.py
        shell: bash
      # Run the deployment based on the arguments given
      - name: Running scheduled deployment for develop
        if: github.event_name == 'schedule'
        # Target for deployment is the test instance of development branch
        run: ./sc-app-deploy.py --deployhost test --branchprefix develop

      - name: Running deployment for develop
        if: github.event.inputs.branch-prefix == 'develop' && github.event_name != 'schedule'
        run: ./sc-app-deploy.py --deployhost team --branchprefix develop --teamnumber ${{ github.event.inputs.team-no }}

      - name: Running deployment for feature
        if: github.event.inputs.branch-prefix == 'feature' && github.event_name != 'schedule'
        run: ./sc-app-deploy.py --deployhost team --branchprefix feature --teamnumber ${{ github.event.inputs.team-no }} --jiraid ${{ github.event.inputs.tag-qualifier }}

      - name: Running deployment for release
        # Ticket ID will be used as version number
        if: github.event.inputs.branch-prefix == 'release' && github.event_name != 'schedule'
        run: ./sc-app-deploy.py --deployhost team --branchprefix release --teamnumber ${{ github.event.inputs.team-no }} --imageversion ${{ github.event.inputs.tag-qualifier }}

      - name: Running deployment for hotfix
        if: github.event.inputs.branch-prefix == 'hotfix' && github.event_name != 'schedule'
        run: ./sc-app-deploy.py --deployhost team --branchprefix hotfix --teamnumber ${{ github.event.inputs.team-no }} --jiraid ${{ github.event.inputs.tag-qualifier }}

      - name: Running deployment for master
        # Ticket ID will be used as version number
        if: github.event.inputs.branch-prefix == 'master' && github.event_name != 'schedule'
        run: ./sc-app-deploy.py --deployhost team --branchprefix master --teamnumber ${{ github.event.inputs.team-no }} --imageversion ${{ github.event.inputs.tag-qualifier }}
