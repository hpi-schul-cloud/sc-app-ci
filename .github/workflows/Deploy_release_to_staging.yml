# Workflow to deploy the HPI Schul-Cloud application next upcomming Release branch to the staging instance
# The later invocation query parameters at start to identify the image tag to be deployed.
# Parameters:
#   branch-prefix : feature|develop|release|hotfix|master
#   team-no       : the team number to identify the machine hotfix<team-no>.schul-cloud.dev
#   ticket-id     : either the JIRA ticket-id used in the branch or the version numer for release and master branches

name: sc-app-deploy-release-staging

# Controls when the action will run.
on:
  repository_dispatch:
    # SC-apps send repository dispatch event
    inputs:
      GIT_BRANCH:
        description: "The full branch name to use."
        required: true
        default: ""
      TRIGGER_REPOSITORY:
        description: "Trigger sending app. Always required."
        required: true
        default: ""
      VERSION:
        description: "version of app"
        required: false
        default: ""
      NEXT_RELEASE:
        description: "version of next Release"
        required: false
        default: ""
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "deploy"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      # Setting environment variables here make them available for all steps
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
    defaults:
      # Setting defaults for all steps, this require the first action must check-out the code
      run:
        working-directory: ./sc-app-deploy

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it must be on first place to allow central setting of working directory
      - uses: actions/checkout@v2
      - name: Echo parameter
        run: |
          echo "GITHUB event trigger: ${{ github.event_name }}"
          echo "GITHUB input GIT_BRANCH:  ${{ github.event.client_payload.GIT_BRANCH }}"
          echo "GITHUB input TRIGGER_REPOSITORY:  ${{ github.event.client_payload.TRIGGER_REPOSITORY }}"
          echo "GITHUB input app VERSION: ${{ github.event.client_payload.VERSION }}"
          echo "Travis env NEXT_RELEASE: ${{ github.event.client_payload.NEXT_RELEASE }}"
          echo "GITHUB NEXT_RELEASE:${{ secrets.NEXT_RELEASE }}""

      - name: Display working directory
        # Just for failure analysis to track down possible issues occurring for invalid host configurations
        run: |
          ls -la .
          env
          chmod a+x ./sc-app-deploy.py
        shell: bash
      - name: cancel workflow if Version of NEXT_RELEASE is NOT VERSION
        if: ${{ NEXT_RELEASE == github.event.client_payload.VERSION }}
        uses: andymckay/cancel-action@0.2

      # Run the deployment to hotfix6 for testing with feature-branch
      # set Branch Prefix

      - name: Running feature deployment for hotfix
        if: github.event.client_payload.VERSION == secrets.NEXT_RELEASE
        run: ./sc-app-deploy.py --deployhost team --branchprefix feature --teamnumber 6 --jiraid OPS-1559

      # Add deploy next release to staging
      # add staging host to ./sc-app-deploy.py
 
